{"version":3,"sources":["angular-stomp.es6.js"],"names":["_createClass","defineProperties","target","props","key","prop","configurable","value","writable","Object","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","ngstompProvider","this","settings","credential","login","password","url","_url","_urlWrapper","_x","apply","arguments","toString","class","clazz","setting","settingsObject","debug","boolean","vhost","host","$get","$q","$log","$rootScope","Stomp","ngStompWebSocket","connect","_this","$setConnection","stompClient","deferred","resolve","$digestStompAction","reject","promiseResult","subscribe","callback","header","scope","then","$stompSubscribe","unRegisterScopeOnDestroy","subscribeTo","topic","SubscribeBuilder","unsubscribe","$stompUnSubscribe","send","queue","data","sendDeffered","defer","JSON","stringify","promise","disconnect","disconnectionPromise","self","subscription","connections","push","indexToRemove","i","len","length","splice","$$phase","$apply","over","client","angular","noop","undefined","isFunction","$on","ngStomp","aCallback","headers","withHeaders","bindTo","aScope","build","and","module","provider","constant","window"],"mappings":"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","file":"angular-stomp.min.js","sourcesContent":["class ngstompProvider {\n\n    constructor() {\n        this.settings = {};\n    }\n\n    credential(login, password) {\n        this.settings.login = login;\n        this.settings.password = password;\n        return this;\n    }\n\n    url(url) {\n        this.settings.url = url;\n        return this;\n    }\n\n    class(clazz) {\n        this.settings.class = clazz;\n        return this;\n    }\n\n    setting(settingsObject) {\n        this.settings = settingsObject;\n        return this;\n    }\n\n    debug(boolean) {\n        this.settings.debug = boolean;\n        return this;\n    }\n\n    vhost(host) {\n        this.settings.vhost = host;\n        return this;\n    }\n\n    /* @ngInject */\n    $get($q, $log, $rootScope, Stomp) {\n        return new ngStompWebSocket(this.settings, $q, $log, $rootScope, Stomp);\n    }\n}\n\nclass ngStompWebSocket {\n\n    /*@ngNoInject*/\n    constructor(settings, $q, $log, $rootScope, Stomp) {\n        this.settings = settings;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$log = $log;\n        this.Stomp = Stomp;\n\n        this.connect();\n    }\n\n    connect() {\n        this.$setConnection();\n        this.stompClient.connect(\n            this.settings.login,\n            this.settings.password,\n            () => {\n                this.deferred.resolve();\n                this.$digestStompAction();\n            },\n            () => {\n                this.deferred.reject();\n                this.$digestStompAction();\n            },\n            this.settings.vhost\n        );\n        return this.promiseResult;\n    }\n\n    subscribe(url, callback, header, scope) {\n        this.promiseResult.then(() => {\n            this.$stompSubscribe(url, callback, header || {});\n            this.unRegisterScopeOnDestroy(scope, url);\n        });\n        return this;\n    }\n\n    subscribeTo(topic) {\n        return new SubscribeBuilder(this, topic);\n    }\n\n    unsubscribe(url) {\n        this.promiseResult.then(() => this.$stompUnSubscribe(url));\n        return this;\n    }\n\n    send(queue, data, header) {\n        let sendDeffered = this.$q.defer();\n\n        this.promiseResult.then(() => {\n            this.stompClient.send(queue, header || {}, JSON.stringify(data));\n            sendDeffered.resolve();\n        });\n\n        return sendDeffered.promise;\n    }\n\n    disconnect() {\n        let disconnectionPromise = this.$q.defer();\n        this.stompClient.disconnect(() => {\n            disconnectionPromise.resolve();\n            this.$digestStompAction();\n        });\n\n        return disconnectionPromise.promise;\n    }\n\n    $stompSubscribe(queue, callback, header) {\n        let self = this;\n        let subscription = self.stompClient.subscribe(queue, function() {\n            callback.apply(self.stompClient, arguments);\n            self.$digestStompAction();\n        }, header);\n        this.connections.push({url: queue, subscription: subscription});\n    }\n\n    $stompUnSubscribe(queue) {\n        let indexToRemove = false;\n        for (var i = 0, len = this.connections.length; i < len; i++) {\n            if (this.connections[i].url === queue) {\n                indexToRemove = i;\n                this.connections[i].subscription.unsubscribe();\n                break;\n            }\n        }\n        if (indexToRemove !== false) {\n            this.connections.splice(indexToRemove, 1);\n        }\n    }\n\n    $digestStompAction() {\n        !this.$rootScope.$$phase && this.$rootScope.$apply();\n    }\n\n    $setConnection() {\n        this.stompClient = this.settings.class ? this.Stomp.over(new this.settings.class(this.settings.url)) : this.Stomp.client(this.settings.url);\n        this.stompClient.debug = (this.settings.debug) ? this.$log.debug : angular.noop;\n        this.connections = [];\n        this.deferred = this.$q.defer();\n        this.promiseResult = this.deferred.promise;\n    }\n\n    unRegisterScopeOnDestroy(scope, url) {\n        if (scope !== undefined && angular.isFunction(scope.$on))\n            scope.$on('$destroy', () => this.unsubscribe(url) );\n    }\n}\n\nclass SubscribeBuilder {\n\n    /*@ngNoInject*/\n    constructor(ngStomp, topic) {\n        this.ngStomp = ngStomp;\n        this.topic = topic\n        this.aCallback = angular.noop;\n        this.headers = {};\n        this.scope = {};\n    }\n\n    callback(aCallback) {\n        this.aCallback = aCallback;\n        return this;\n    }\n\n    withHeaders(headers) {\n        this.headers = headers\n        return this;\n    }\n\n    bindTo(aScope) {\n        this.scope = aScope;\n        return this;\n    }\n\n    build() {\n        return this.ngStomp.subscribe(this.topic, this.aCallback, this.headers, this.scope);\n    }\n\n    and() {\n        return this.build();\n    }\n}\n\nangular\n    .module('AngularStompDK', [])\n        .provider('ngstomp', ngstompProvider)\n        .constant('Stomp', window.Stomp);\n"],"sourceRoot":"/source/"}