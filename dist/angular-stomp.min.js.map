{"version":3,"sources":["angular-stomp.es6.js"],"names":["_createClass","defineProperties","target","props","key","prop","configurable","value","writable","Object","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","ngstompProvider","this","settings","credential","login","password","url","_url","_urlWrapper","_x","apply","arguments","toString","class","clazz","setting","settingsObject","debug","boolean","vhost","host","$get","$q","$log","$rootScope","Stomp","ngStompWebSocket","connect","_this","$setConnection","stompClient","deferred","resolve","$digestStompAction","reject","promiseResult","subscribe","callback","header","scope","then","$stompSubscribe","unRegisterScopeOnDestroy","unsubscribe","$stompUnSubscribe","send","queue","data","sendDeffered","defer","JSON","stringify","promise","disconnect","disconnectionPromise","self","subscription","connections","push","indexToRemove","i","len","length","splice","$$phase","$apply","over","client","angular","noop","undefined","isFunction","$on","module","provider","constant","window"],"mappings":"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","file":"angular-stomp.min.js","sourcesContent":["class ngstompProvider {\n\n    constructor() {\n        this.settings = {};\n    }\n\n    credential(login, password) {\n        this.settings.login = login;\n        this.settings.password = password;\n        return this;\n    }\n\n    url(url) {\n        this.settings.url = url;\n        return this;\n    }\n\n    class(clazz) {\n        this.settings.class = clazz;\n        return this;\n    }\n\n    setting(settingsObject) {\n        this.settings = settingsObject;\n        return this;\n    }\n\n    debug(boolean) {\n        this.settings.debug = boolean;\n        return this;\n    }\n\n    vhost(host) {\n        this.settings.vhost = host;\n        return this;\n    }\n\n    /* @ngInject */\n    $get($q, $log, $rootScope, Stomp) {\n        return new ngStompWebSocket(this.settings, $q, $log, $rootScope, Stomp);\n    }\n}\nclass ngStompWebSocket {\n\n    /*@ngNoInject*/\n    constructor(settings, $q, $log, $rootScope, Stomp) {\n        this.settings = settings;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$log = $log;\n        this.Stomp = Stomp;\n\n        this.connect();\n    }\n\n    connect() {\n        this.$setConnection();\n        this.stompClient.connect(\n            this.settings.login,\n            this.settings.password,\n            () => {\n                this.deferred.resolve();\n                this.$digestStompAction();\n            },\n            () => {\n                this.deferred.reject();\n                this.$digestStompAction();\n            },\n            this.settings.vhost\n        );\n        return this.promiseResult;\n    }\n\n    subscribe(url, callback, header, scope) {\n        this.promiseResult.then(() => {\n            this.$stompSubscribe(url, callback, header || {});\n            this.unRegisterScopeOnDestroy(scope, url);\n        });\n        return this;\n    }\n\n    unsubscribe(url) {\n        this.promiseResult.then(() => this.$stompUnSubscribe(url));\n        return this;\n    }\n\n    send(queue, data, header) {\n        let sendDeffered = this.$q.defer();\n\n        this.promiseResult.then(() => {\n            this.stompClient.send(queue, header || {}, JSON.stringify(data));\n            sendDeffered.resolve();\n        });\n\n        return sendDeffered.promise;\n    }\n\n    disconnect() {\n        let disconnectionPromise = this.$q.defer();\n        this.stompClient.disconnect(() => {\n            disconnectionPromise.resolve();\n            this.$digestStompAction();\n        });\n\n        return disconnectionPromise.promise;\n    }\n\n    $stompSubscribe(queue, callback, header) {\n        let self = this;\n        let subscription = self.stompClient.subscribe(queue, function() {\n            callback.apply(self.stompClient, arguments);\n            self.$digestStompAction();\n        }, header);\n        this.connections.push({url: queue, subscription: subscription});\n    }\n\n    $stompUnSubscribe(queue) {\n        let indexToRemove = false;\n        for (var i = 0, len = this.connections.length; i < len; i++) {\n            if (this.connections[i].url === queue) {\n                indexToRemove = i;\n                this.connections[i].subscription.unsubscribe();\n                break;\n            }\n        }\n        if (indexToRemove !== false) {\n            this.connections.splice(indexToRemove, 1);\n        }\n    }\n\n    $digestStompAction() {\n        !this.$rootScope.$$phase && this.$rootScope.$apply();\n    }\n\n    $setConnection() {\n        this.stompClient = this.settings.class ? this.Stomp.over(new this.settings.class(this.settings.url)) : this.Stomp.client(this.settings.url);\n        this.stompClient.debug = (this.settings.debug) ? this.$log.debug : angular.noop;\n        this.connections = [];\n        this.deferred = this.$q.defer();\n        this.promiseResult = this.deferred.promise;\n    }\n\n    unRegisterScopeOnDestroy(scope, url) {\n        if (scope !== undefined && angular.isFunction(scope.$on))\n            scope.$on('$destroy', () => this.unsubscribe(url) );\n    }\n}\nangular\n    .module('AngularStompDK', [])\n        .provider('ngstomp', ngstompProvider)\n        .constant('Stomp', window.Stomp);\n"],"sourceRoot":"/source/"}