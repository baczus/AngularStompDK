{"version":3,"file":"angular-stomp.min.js","sources":["angular-stomp.es6.js"],"names":[],"mappings":"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","sourcesContent":["class ngstompProvider {\n\n    constructor() {\n        this.settings = {};\n    }\n\n    credential(login, password) {\n        this.settings.login = login;\n        this.settings.password = password;\n        return this;\n    }\n\n    url(url) {\n        this.settings.url = url;\n        return this;\n    }\n\n    class(clazz) {\n        this.settings.class = clazz;\n        return this;\n    }\n\n    settings(settingsObject) {\n        this.settings = settingsObject;\n        return this;\n    }\n\n    debug(boolean) {\n        this.settings.debug = boolean;\n        return this;\n    }\n\n    vhost(host) {\n        this.settings.vhost = host;\n        return this;\n    }\n\n    $get($q, $log, $rootScope) {\n        return new ngStompWebSocket(this.settings, $q, $log, $rootScope);\n    }\n}\nclass ngStompWebSocket {\n\n    /*@ngNoInject*/\n    constructor(settings, $q, $log, $rootScope) {\n        this.settings = settings;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n\n        this.stompClient = settings.class ? Stomp.over(new settings.class(settings.url)) : Stomp.client(settings.url);\n        this.stompClient.debug = (settings.debug) ? $log.debug : function () {};\n\n        this.connections = [];\n        this.deferred = this.$q.defer();\n        this.promiseResult = this.deferred.promise;\n        this.connect();\n    }\n\n    connect() {\n        this.stompClient.connect(\n            this.settings.login,\n            this.settings.password,\n            () => {\n                this.deferred.resolve();\n                this.$digestStompAction();\n            },\n            () => {\n                this.deferred.reject();\n                this.$digestStompAction();\n            },\n            this.settings.vhost\n        );\n        return this.promiseResult;\n    }\n\n    subscribe(url, callback, scope) {\n        this.promiseResult.then(() => {\n            this.$stompSubscribe(url, callback);\n            this.unRegisterScopeOnDestroy(scope, url);\n        });\n        return this;\n    }\n\n    unsubscribe(url) {\n        this.promiseResult.then(() => this.$stompUnSubscribe(url));\n        return this;\n    };\n\n    send(queue, data, header) {\n        let sendDeffered = this.$q.defer();\n\n        this.promiseResult.then(() => {\n            this.stompClient.send(queue, header || {}, JSON.stringify(data));\n            sendDeffered.resolve();\n        });\n\n        return sendDeffered.promise;\n    };\n\n    disconnect() {\n        let disconnectionPromise = this.$q.defer();\n        this.stompClient.disconnect(() => {\n            disconnectionPromise.resolve();\n            this.$digestStompAction();\n        });\n\n        return disconnectionPromise.promise;\n    }\n\n    $stompSubscribe(queue, callback) {\n        let subscription = this.stompClient.subscribe(queue, () => {\n                callback.apply(this.stompClient, arguments);\n                this.$digestStompAction()\n            });\n        this.connections.push({url: queue, subscription: subscription});\n    }\n\n    $stompUnSubscribe(queue) {\n        let indexToRemove = false;\n        for (var i = 0, len = this.connections.length; i < len; i++) {\n            if (this.connections[i].url === queue) {\n                indexToRemove = i;\n                this.connections[i].subscription.unsubscribe();\n                break;\n            }\n        }\n        if (indexToRemove !== false) {\n            this.connections.splice(indexToRemove, 1);\n        }\n    }\n\n    $digestStompAction() {\n        !$rootScope.$$phase && $rootScope.$apply();\n    }\n\n    unRegisterScopeOnDestroy(scope, url) {\n        if (scope !== undefined && angular.isFunction(scope.$on))\n            scope.$on('$destroy', () => this.unsubscribe(url) );\n    }\n}\nangular.module('AngularStompDK', [])\n    .provider('ngstomp', ngstompProvider);\n"],"sourceRoot":"/source/"}